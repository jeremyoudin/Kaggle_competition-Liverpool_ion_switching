{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Stack_LSTM_DT-Ion_channel_935score","provenance":[{"file_id":"1Jd3eimCdwpCQgR6n1OkbmCDcPJqDISTl","timestamp":1587931303211},{"file_id":"18I2CrAjp2Y43faIqTbq4Ce_a2cX1a-FV","timestamp":1587719440830},{"file_id":"1b82HKatfScZfeMicPtgqw0LHWyEawZW6","timestamp":1587658351738},{"file_id":"17DEFs3E6W2-qWdwVqlVraU54ADiADQEQ","timestamp":1587635175310}],"collapsed_sections":["tDRJ5L2pImJh","w_Ue6heLFvY0","DaswK-Mvas2g","39kNubypfKuB","EhHwiMwttu0d","QxmAPEtNtk-s"],"machine_shape":"hm","authorship_tag":"ABX9TyNLVDzEtXn608J1dwwjlUNx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"tDRJ5L2pImJh","colab_type":"text"},"source":["# **Chargement des fichiers**"]},{"cell_type":"code","metadata":{"id":"Yrue_46RFJ6n","colab_type":"code","outputId":"57d1d6cc-e2e6-4207-b0f0-8af28af51d25","executionInfo":{"status":"ok","timestamp":1588073599050,"user_tz":-120,"elapsed":215639,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}},"colab":{"base_uri":"https://localhost:8080/","height":158}},"source":["import pandas as pd\n","from google.colab import drive \n","drive.mount('/gdrive', force_remount=True)\n","import tensorflow.compat.v1 as tf\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import seaborn as sns"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"QAk56XsmFsVO","colab_type":"code","colab":{}},"source":["df_train = pd.read_csv('/gdrive/My Drive/Kaggle/liverpool-ion-switching/train.csv')\n","df_test = pd.read_csv('/gdrive/My Drive/Kaggle/liverpool-ion-switching/test.csv')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"w_Ue6heLFvY0","colab_type":"text"},"source":["# **Preparation du training set et du test set**"]},{"cell_type":"code","metadata":{"id":"qZ4hWVAiFUhc","colab_type":"code","colab":{}},"source":["df = df_train.copy() # Va contenir le training set préparé proprement\n","df['signal'].at[478587] = df_train['signal'].iloc[0:478586].mean() # Retire les outliers du sample numero 1\n","df['signal'].at[478609] = df_train['signal'].iloc[0:478609].mean()\n","df['signal'].at[478610] = df_train['signal'].iloc[0:478610].mean()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_XOJgTkoFeeJ","colab_type":"code","colab":{}},"source":["import numpy.polynomial.polynomial as poly \n","n_sample = 500000\n","degree = 2 # Correction de la rampe du sample numero 2\n","t=df_train['time'].iloc[500000:500000+100000]\n","f=df_train['signal'].iloc[500000:500000+100000]\n","coefs = poly.polyfit(t, f, degree)\n","ffit = poly.polyval(t, coefs)\n","df.loc[500000:500000+100000-1, 'signal'] = f-ffit + df_train['signal'].iloc[500000+100000-1:500000*2].mean()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4a8DGVk5FgnZ","colab_type":"code","colab":{}},"source":["#Correction des rampes du test set\n","df_test.loc[100000:200000-1,'signal'] = df_test['signal'].iloc[100000:200000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()\n","df_test.loc[700000:800000-1,'signal'] = df_test['signal'].iloc[700000:800000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()\n","df_test.loc[600000:700000-1,'signal'] = df_test['signal'].iloc[600000:700000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()\n","df_test.loc[0:100000-1,'signal'] = df_test['signal'].iloc[0:100000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()\n","df_test.loc[400000:500000-1,'signal'] = df_test['signal'].iloc[400000:500000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()\n","df_test.loc[800000:900000-1,'signal'] = df_test['signal'].iloc[800000:900000].values - ffit.values + df_train['signal'].iloc[500000+100000-1:500000*2].mean()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1Ipb6_6aFi_s","colab_type":"code","outputId":"e6d839d6-4964-4fe0-e47e-57e2033a20b8","executionInfo":{"status":"ok","timestamp":1588073603010,"user_tz":-120,"elapsed":219431,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}},"colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["degree = 10 # Correction de toutes les paraboles dans le training et test set\n","n_batch = 6\n","f = df_train['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","t = df_train['time'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","coefs = poly.polyfit(t, f, degree)\n","ffit = poly.polyval(t, coefs)\n","for n_batch in [6,7,8,9]: \n","  df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'].values-ffit.values\n","df_test['signal'].iloc[2*n_sample:3*n_sample] = f.values-ffit.values"],"execution_count":7,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/polynomial/polynomial.py:1336: RankWarning: The fit may be poorly conditioned\n","  return pu._fit(polyvander, x, y, deg, rcond, full, w)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"a_okciZvFmK1","colab_type":"code","colab":{}},"source":["ref = min(df['signal'].iloc[n_sample*0:n_sample*(0+1)].loc[(df.open_channels == 1)])\n","for n_batch in range(10): # Correction des offsets de tous batchs\n","  if n_batch == 8:\n","    f = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","    label_1_mean_pos = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)].loc[(df.open_channels == 1)] # Posision moyenne des label égale à 1, seule classe commune à tous les batch du train set\n","    df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = f-label_1_mean_pos.mean()\n","    df_test.loc[1000000:1500000-1,'signal'] = df_test.loc[1000000:1500000-1,'signal'].values-label_1_mean_pos.mean()\n","  elif n_batch == 0:\n","    f = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","    label_1_mean_pos = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)].loc[(df.open_channels == 1)] # Posision moyenne des label égale à 1, seule classe commune à tous les batch du train set\n","    df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = f-label_1_mean_pos.mean()\n","    df_test.loc[0:500000-1,'signal'] = df_test.loc[0:500000-1,'signal'].values-label_1_mean_pos.mean()\n","    df_test.loc[600000:700000-1,'signal'] = df_test.loc[600000:700000-1,'signal'].values-label_1_mean_pos.mean()\n","    df_test.loc[800000:1000000-1,'signal'] = df_test.loc[800000:1000000-1,'signal'].values-label_1_mean_pos.mean()\n","    df_test.loc[1500000:20000000-1,'signal'] = df_test.loc[1500000:20000000-1,'signal'].values-label_1_mean_pos.mean() \n","  elif n_batch == 4:\n","    f = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","    label_1_mean_pos = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)].loc[(df.open_channels == 1)] # Posision moyenne des label égale à 1, seule classe commune à tous les batch du train set\n","    df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = f-label_1_mean_pos.mean()+0.05\n","    df_test.loc[500000:600000-1,'signal'] = df_test.loc[500000:600000-1,'signal'].values-label_1_mean_pos.mean()\n","    df_test.loc[700000:800000-1,'signal'] = df_test.loc[700000:800000-1,'signal'].values-label_1_mean_pos.mean()\n","  elif n_batch == 9:\n","    f = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","    label_1_mean_pos = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)].loc[(df.open_channels == 1)] # Posision moyenne des label égale à 1, seule classe commune à tous les batch du train set\n","    df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = f-label_1_mean_pos.mean()+0.28\n","  else:\n","    f = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)]\n","    label_1_mean_pos = df['signal'].iloc[n_sample*n_batch:n_sample*(n_batch+1)].loc[(df.open_channels == 1)] # Posision moyenne des label égale à 1, seule classe commune à tous les batch du train set\n","    df.loc[n_sample*n_batch:n_sample*(n_batch+1)-1,'signal'] = f-label_1_mean_pos.mean()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DaswK-Mvas2g","colab_type":"text"},"source":["# **Visualisation des données**"]},{"cell_type":"markdown","metadata":{"id":"eCOvYIdtar1y","colab_type":"text"},"source":["n_sample=500000\n","mean_pos=[]\n","i=0\n","for s in range(0,11,1):\n","    f = df['signal'].loc[(df.open_channels == s)]\n","    t = df['time'].loc[(df.open_channels == s)]\n","    mean_pos.append(f.mean())\n","\n","    plt.figure(figsize=(25,5))\n","    figure=plt.figure(1)\n","    plt.scatter(t,f, marker='+', linewidths=0.1)\n","    plt.plot([0,500],[mean_pos[i],mean_pos[i]])\n","    i+=1"]},{"cell_type":"markdown","metadata":{"id":"39kNubypfKuB","colab_type":"text"},"source":["# **Mise en forme des datas pour le réseau de neurones**"]},{"cell_type":"code","metadata":{"id":"ELUGCY3Ub-BW","colab_type":"code","colab":{}},"source":["def split_sequence(sequence_x, sequence_y, n_steps, n_after):\n","\tX, y = list(), list()\n","\tfor i in range(len(sequence_x)):\n","\t\t# find the end of this pattern\n","\t\tend_ix = i + n_steps\n","\t\t# check if we are beyond the sequence\n","\t\tif end_ix + n_after > len(sequence_x)-1:\n","\t\t\tbreak\n","\t\t# gather input and output parts of the pattern\n","\t\tseq_x, seq_y = sequence_x[i:end_ix + n_after], sequence_y[end_ix]\n","\t\tX.append(seq_x)\n","\t\ty.append(seq_y)\n","\treturn np.array(X), np.array(y)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"pii9-Dtq40j8","colab_type":"code","colab":{}},"source":["def split_sequence_2(sequence_x, n_steps, n_after):\n","\tX=list()\n","\tfor i in range(len(sequence_x)):\n","\t\t# find the end of this pattern\n","\t\tend_ix = i + n_steps\n","\t\t# check if we are beyond the sequence\n","\t\tif end_ix + n_after > len(sequence_x)-1:\n","\t\t\tbreak\n","\t\t# gather input and output parts of the pattern\n","\t\tseq_x = sequence_x[i:end_ix + n_after]\n","\t\tX.append(seq_x)\n","\treturn np.array(X)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7KgYPvlTdkS0","colab_type":"code","outputId":"2cd96fa6-3038-4d42-ece7-3d7ebd5b815b","executionInfo":{"status":"ok","timestamp":1588073618034,"user_tz":-120,"elapsed":234346,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}},"colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["# Entrainement de l'arbre de décision\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import f1_score\n","list_batch_7 = list(df['signal'].iloc[7*n_sample:8*n_sample].index)\n","df.drop(list_batch_7,axis=0,inplace=False)\n","X_train, X_val, y_train, y_val = train_test_split(df.drop(list_batch_7,axis=0,inplace=False)['signal'].values.reshape(-1,1), \n","                                                  df.drop(list_batch_7,axis=0,inplace=False)['open_channels'].values.reshape(-1,1), test_size=0.2, random_state=0)\n","\n","DT =DecisionTreeClassifier(max_depth=10)\n","DT.fit(X_train, y_train)\n","print('Train_score:', DT.score(X_train, y_train))\n","print('Val_score:', DT.score(X_val, y_val))\n","y_pred=DT.predict(X_train)\n","\n","print('f1_score_train:', f1_score(y_train, y_pred, average=\"macro\"))\n","y_pred=DT.predict(X_val)\n","print('f1_score_val:', f1_score(y_val, y_pred, average=\"macro\"))\n","# on génère le signal composé de la prédiction du DT\n","X_DT_ = DT.predict(df['signal'].values.reshape(-1,1))\n","df['DT_pred'] = X_DT_ # Ajout de cette nouvelle information au training set\n","X_DT_ = DT.predict(df_test['signal'].values.reshape(-1,1))\n","df_test['DT_pred'] = X_DT_ # Ajout de cette nouvelle information au test set"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Train_score: 0.9591961111111111\n","Val_score: 0.9591255555555556\n","f1_score_train: 0.9274293987512455\n","f1_score_val: 0.926720972166449\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"EhHwiMwttu0d","colab_type":"text"},"source":["# **Mise en forme du training set**"]},{"cell_type":"code","metadata":{"id":"UN7JaNrWxe-8","colab_type":"code","outputId":"620bcd1d-f246-4593-d6e8-edeaf051dfa3","executionInfo":{"status":"ok","timestamp":1588073623357,"user_tz":-120,"elapsed":239647,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}},"colab":{"base_uri":"https://localhost:8080/","height":0}},"source":["from keras.utils import to_categorical\n","from sklearn.preprocessing import StandardScaler\n","\n","# choose a number of time steps\n","n_steps = 10\n","n_after = 5\n","# split into samples\n","n_batch = 4\n","X_1, y_1 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 1\n","X_2, y_2 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 2\n","X_3, y_3 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 3\n","X_4, y_4 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 0\n","X_5, y_5 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 5\n","X_6, y_6 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 6\n","X_7, y_7 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 8\n","X_8, y_8 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 9\n","X_9, y_9 = split_sequence(df['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, df['open_channels'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","X = np.concatenate((X_1,X_2,X_3,X_4,X_5,X_6,X_7,X_8,X_9), axis=0)\n","y_ = np.concatenate((y_1,y_2,y_3,y_4,y_5,y_6,y_7,y_8,y_9), axis=0) \n","y = to_categorical(y_)"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"YzAxPKcCEkh1","colab_type":"code","colab":{}},"source":["# choose a number of time steps\n","n_batch = 4\n","X_DT_1 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 1\n","X_DT_2 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 2\n","X_DT_3 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 3\n","X_DT_4 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 0\n","X_DT_5 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 5\n","X_DT_6 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 6\n","X_DT_7 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 8\n","X_DT_8 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch = 9\n","X_DT_9 = split_sequence_2(df['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","X_DT = np.concatenate((X_DT_1,X_DT_2,X_DT_3,X_DT_4,X_DT_5,X_DT_6,X_DT_7,X_DT_8,X_DT_9), axis=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yMu1ZtHsGp6S","colab_type":"code","colab":{}},"source":["n_features = 1\n","X = X.reshape((X.shape[0], X.shape[1], n_features))\n","X_DT = X_DT.reshape((X_DT.shape[0], X_DT.shape[1], n_features))\n","X_ = np.concatenate((X,X_DT), axis=2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GbCH1V-TIe3c","colab_type":"code","colab":{}},"source":["X_train, X_val, y_train, y_val = train_test_split(X_, y, test_size=0.2, random_state=2) # On split les data en train set et validation set"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QxmAPEtNtk-s","colab_type":"text"},"source":["# **Mise en forme du test set**"]},{"cell_type":"code","metadata":{"id":"9V_mT572GInB","colab_type":"code","colab":{}},"source":["n_sample = 100000 # signal series for test set\n","n_batch=0\n","X_test_1 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=1\n","X_test_2 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=2\n","X_test_3 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=3\n","X_test_4 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=4\n","X_test_5 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=5\n","X_test_6 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=6\n","X_test_7 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=7\n","X_test_8 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=8\n","X_test_9 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=9\n","X_test_10 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","n_sample = 500000\n","n_batch=2\n","X_test_11 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=3\n","X_test_12 = split_sequence_2(df_test['signal'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","X_test_ = np.concatenate((X_test_1,X_test_2,X_test_3,X_test_4,X_test_5,X_test_6,X_test_7,X_test_8,X_test_9,X_test_10,X_test_11,X_test_12,), axis = 0)\n","X_test_ = X_test_.reshape((X_test_.shape[0], X_test_.shape[1], n_features))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"72mI8UV_iAF8","colab_type":"code","colab":{}},"source":["n_sample = 100000 # DT series for test set\n","n_batch=0\n","X_test_DT_1 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=1\n","X_test_DT_2 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=2\n","X_test_DT_3 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=3\n","X_test_DT_4 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=4\n","X_test_DT_5 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=5\n","X_test_DT_6 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=6\n","X_test_DT_7 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=7\n","X_test_DT_8 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=8\n","X_test_DT_9 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=9\n","X_test_DT_10 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","n_sample = 500000\n","n_batch=2\n","X_test_DT_11 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","n_batch=3\n","X_test_DT_12 = split_sequence_2(df_test['DT_pred'].iloc[n_batch*n_sample:n_sample*(n_batch+1)].values, n_steps, n_after)\n","\n","X_test_DT = np.concatenate((X_test_DT_1,X_test_DT_2,X_test_DT_3,X_test_DT_4,X_test_DT_5,X_test_DT_6,X_test_DT_7,X_test_DT_8,X_test_DT_9,X_test_DT_10,X_test_DT_11,X_test_DT_12,), axis = 0)\n","X_test_DT = X_test_DT.reshape((X_test_DT.shape[0], X_test_DT.shape[1], n_features)) "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nWVWj7g7Su_r","colab_type":"code","colab":{}},"source":["X_test = np.concatenate((X_test_,X_test_DT), axis=2)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ghEtBDjsIfAW","colab_type":"text"},"source":["# **Machine learning**"]},{"cell_type":"code","metadata":{"id":"N2xPzwjsiICt","colab_type":"code","colab":{}},"source":["from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(min_delta = 0.001, mode = 'max', monitor='val_accuracy', patience = 3) # Eviter d'overfitter\n","callback = [early_stopping]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"yWzcHHq30W79","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"outputId":"e2e612d5-4313-466f-cf3d-cecce2382402","executionInfo":{"status":"ok","timestamp":1588073639751,"user_tz":-120,"elapsed":255841,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}}},"source":["from tensorflow.keras.optimizers import SGD\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, LSTM, Activation, Bidirectional\n","\n","n_cat=11\n","opt = SGD(lr=0.0005, momentum=0.9, nesterov=False)\n","\n","model = Sequential()\n","model.add(Bidirectional(LSTM(64, activation='relu', return_sequences=True)))\n","model.add(Bidirectional(LSTM(64, activation='relu', return_sequences=False)))\n","model.add(Dense(n_cat))\n","model.add(Activation('softmax'))\n","model.compile(loss='categorical_crossentropy', optimizer=opt, metrics='accuracy')"],"execution_count":20,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:Layer lstm will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n","WARNING:tensorflow:Layer lstm will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n","WARNING:tensorflow:Layer lstm will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n","WARNING:tensorflow:Layer lstm_1 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n","WARNING:tensorflow:Layer lstm_1 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n","WARNING:tensorflow:Layer lstm_1 will not use cuDNN kernel since it doesn't meet the cuDNN kernel criteria. It will use generic GPU kernel as fallback when running on GPU\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0d6Lbzmrhy7u","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"outputId":"a08056bd-8a1a-486f-e4f0-e3517ad7823c","executionInfo":{"status":"ok","timestamp":1588075181653,"user_tz":-120,"elapsed":1797723,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}}},"source":["history=model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=4, batch_size=1024, verbose=1, callbacks=callback)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","3516/3516 [==============================] - 257s 73ms/step - loss: 0.5471 - accuracy: 0.8217 - val_loss: 0.1874 - val_accuracy: 0.9320\n","Epoch 2/20\n","3516/3516 [==============================] - 257s 73ms/step - loss: 0.1311 - accuracy: 0.9512 - val_loss: 0.0967 - val_accuracy: 0.9635\n","Epoch 3/20\n","3516/3516 [==============================] - 257s 73ms/step - loss: 0.1004 - accuracy: 0.9626 - val_loss: 0.0905 - val_accuracy: 0.9655\n","Epoch 4/20\n","3516/3516 [==============================] - 257s 73ms/step - loss: 0.0964 - accuracy: 0.9638 - val_loss: 0.0968 - val_accuracy: 0.9635\n","Epoch 5/20\n","3516/3516 [==============================] - 255s 72ms/step - loss: 0.0941 - accuracy: 0.9644 - val_loss: 0.1078 - val_accuracy: 0.9595\n","Epoch 6/20\n","3516/3516 [==============================] - 254s 72ms/step - loss: 0.0921 - accuracy: 0.9649 - val_loss: 0.0940 - val_accuracy: 0.9642\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"oVNfkqhJiZst","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":622},"outputId":"4a24329f-476a-4b04-8286-c9d76117d1d5","executionInfo":{"status":"ok","timestamp":1588075181935,"user_tz":-120,"elapsed":1797980,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}}},"source":["plt.figure(figsize=(20,5))\n","plt.subplot(1,2,1)\n","plt.plot(history.history['loss'], label='train')\n","plt.plot(history.history['val_loss'], label='test')\n","plt.legend()\n","plt.show()\n","plt.figure(figsize=(20,5))\n","plt.subplot(1,2,2)\n","plt.plot(history.history['accuracy'], label='train')\n","plt.plot(history.history['val_accuracy'], label='test')\n","plt.legend()\n","plt.show()"],"execution_count":22,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"LqQzj6VXLreD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"0640869b-f014-4383-b8db-34fbcec9afef","executionInfo":{"status":"ok","timestamp":1588075393905,"user_tz":-120,"elapsed":2009928,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}}},"source":["from sklearn.metrics import f1_score\n","\n","y_proba_hat = model.predict(X_val)\n","yhat=[]\n","y_val_=[]\n","y_train_=[]\n","for i in range (y_proba_hat.shape[0]):\n","  yhat.append(np.argmax(y_proba_hat[i]))\n","  y_val_.append(np.argmax(y_val[i]))\n","  y_train_.append(np.argmax(y_train[i]))\n","\n","print(f1_score(y_val_, yhat, average='macro'))"],"execution_count":23,"outputs":[{"output_type":"stream","text":["0.9331653141922595\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wAkQCo_RzTqF","colab_type":"text"},"source":["# **Prediction sur le test set avec prédictions des points manquants du au LSTM**"]},{"cell_type":"code","metadata":{"id":"PzYp-zoIuA0o","colab_type":"code","colab":{}},"source":["missing_pred=[] # il manque n_steps points à prédire pour chaque début de batch\n","n_size = 100000\n","for i in range(10):\n","    for n in range(n_steps):\n","        missing_pred.append(df_test['signal'].iloc[i*n_size+n])\n","    for n in range(1,1+n_after,1):\n","        missing_pred.append(df_test['signal'].iloc[(i+1)*n_size-n])\n","for i in [2,3]:\n","    for n in range(n_steps):\n","        missing_pred.append(df_test['signal'].iloc[i*n_sample+n])\n","    for n in range(1,1+n_after,1):\n","        missing_pred.append(df_test['signal'].iloc[(i+1)*n_sample-n])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"AkjrpUFr2p5Z","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":69},"outputId":"3823f85c-73e8-4c6b-b4dc-816f91ef7575","executionInfo":{"status":"ok","timestamp":1588075406807,"user_tz":-120,"elapsed":2022782,"user":{"displayName":"Jeremy Oudin","photoUrl":"","userId":"06102419893006253883"}}},"source":["from sklearn.tree import DecisionTreeClassifier # On utilise un arbre de décision pour prédire les 12*n_steps points manquants\n","X = df['signal'].values\n","Y = df['open_channels'].values\n","X_train, X_val, y_train, y_val = train_test_split(X.reshape(-1,1), Y, test_size=0.2, random_state=1) # On split les data en train set et validation set\n","\n","DT =DecisionTreeClassifier(max_depth=10)\n","DT.fit(X_train,y_train)\n","print('Train_score:', DT.score(X_train,y_train))\n","print('Test_score:', DT.score(X_val,y_val))\n","y_pred=DT.predict(X_val)\n","print(f1_score(y_val, y_pred, average=\"macro\")) # L'arbre de décision donne des résultats corrects"],"execution_count":25,"outputs":[{"output_type":"stream","text":["Train_score: 0.95728125\n","Test_score: 0.95679\n","0.9242250725763845\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"l21IMJIU5atC","colab_type":"code","colab":{}},"source":["y_prediction = model.predict(X_test) # Prédiction du Réseau de neurones sur le test set\n","pred=[]\n","for i in range(len(y_prediction)):\n","  pred.append(np.argmax(y_prediction[i]))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eGMUcOHL5DhF","colab_type":"code","colab":{}},"source":["missing_prediction = DT.predict(np.asarray(missing_pred).reshape(-1,1)) # Présiction de l'arbre sur les points manquants"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4V9KNFrQuFm6","colab_type":"code","colab":{}},"source":["final_pred=[] # Combinaison des prédiction du Réseau de neurones et des prédictions de l'arbre\n","for i in range(10):\n","    for n in range(n_steps):\n","        final_pred.append(missing_prediction[(i*n_steps+n_after)+n])\n","    for n in range(n_size-n_steps-n_after):\n","         final_pred.append(pred[i*(n_size-n_steps-n_after)+n])\n","    for n in range(n_after):\n","        final_pred.append(missing_prediction[(i)*(n_steps+n_after)+n_steps+n])\n","for i in range(2):\n","    for n in range(n_steps):\n","        final_pred.append(missing_prediction[(10*n_steps+n_after)+(i*n_steps+n_after)+n])\n","    for n in range(n_sample-n_steps-n_after):\n","        final_pred.append(pred[10*(n_size-n_steps-n_after)+i*(n_sample-n_steps-n_after)+n])\n","    for n in range(n_after):\n","        final_pred.append(missing_prediction[(10*n_steps+n_after)+(i)*(n_steps+n_after)+n_steps+n])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"0a0O4uXv-vge","colab_type":"code","colab":{}},"source":["df_submission = pd.read_csv('/gdrive/My Drive/Kaggle/liverpool-ion-switching/sample_submission.csv') # Ouverture du template de submission"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1HokGQjC-yAo","colab_type":"code","colab":{}},"source":["df_submission['open_channels'] = final_pred # Remplacement de la collone des predictions"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L7t6QEg5-3KU","colab_type":"code","colab":{}},"source":["df_submission.to_csv(r'/gdrive/My Drive/Kaggle/liverpool-ion-switching/Submission/submission_21-LSTM_stack_model_DT_nsteps_10_nafter_5.csv', index = False, float_format='%.4f')"],"execution_count":0,"outputs":[]}]}